#!/bin/bash

command=$1

CURRENT_DIR="$(pwd)"
CONFIG_FILE="rd-docker.config"
RD_DOCKER_DIR="$(dirname $0)"
UPDATE_CHECK_FILE="$RD_DOCKER_DIR/.last_update_check"
header_indicator="==========>"
command_indicator=">"

load_config_file(){
  file_path="$CURRENT_DIR/$CONFIG_FILE"

  if [[ ! -f "$file_path" ]]; then
    echo_command "Configuration file missing: rd-docker.config not found in current directory"
    exit 1
  fi
  source "$file_path"
}

validate_required_config(){
  if [[ "${!1}" == "" ]]; then
    echo_command "Configuration missing: $1 is requried. Please configure it on rd-docker.config"
    exit 1
  fi
}

validate_config_format(){
  config=$1
  format=$2
  message=$3
  if [[ ! "${!config}" =~ $format ]]; then
    echo_command "Invalid configuration format: $message"
    exit 1
  fi
}

validate_configs(){
  validate_required_config "MAIN_CONTAINER_NAME"
  validate_required_config "APP_PREFIX"
  validate_config_format "APP_PREFIX" "^[a-zA-Z0-9]+$" "APP_PREFIX must contain only alphanumeric characters"
}

ensure_uptodate_rddocker(){
  touch "$UPDATE_CHECK_FILE"

  today="$(date +%Y%m%d)"
  last_update_check="$(cat $UPDATE_CHECK_FILE)"

  if [[ "$today" > "$last_update_check" ]]; then
    update_rddocker
    echo "$today" > "$UPDATE_CHECK_FILE"
  fi
}

get_container_id(){
  app=$1

  if [[ "$app" == "" ]]; then
    app=$MAIN_CONTAINER_NAME
  fi

  docker ps | grep "${APP_PREFIX}_${app}" | awk '{print $1}'
}

update_rddocker(){
  echo_command "Updating rd-docker script"
  git -C "$RD_DOCKER_DIR" checkout master
  git -C "$RD_DOCKER_DIR" pull origin master
}

# Validation methods
ensure_uptodate_image(){
  echo_command "Checking image updates..."
  docker-compose pull $MAIN_CONTAINER_NAME
}

# Housekeeping methods
clear_containers(){
  echo_command "Removing possibly existing containers"
  docker rm -f $(docker ps -a | grep "${APP_PREFIX}_" | awk '{ print $1 }') >> /dev/null 2>&1
}

clear_volumes(){
  echo_command "Removing possibly existing volumes"
  docker volume rm $(docker volume ls -q | grep "${APP_PREFIX}_") >> /dev/null 2>&1
}

execute_command() {
  if [[ "$1" == "help" ]]; then
    show_exec_help
    exit 0
  fi

  app=$1
  cmd=${@:2} # get all arguments except the first

  if [[ "$app" == "" ]]; then
    echo_command "Container app is a required parameter."
    show_exec_help
    exit 1
  fi

  main_container_id=$(get_container_id)
  if [[ "$main_container_id" == "" ]]; then
    raise_infrastructure
  fi

  container_id=$(get_container_id $app)
  if [[ "$container_id" == "" ]]; then
    echo_command "Container '$app' not found"
    exit 1
  fi

  echo_command "Executing '$cmd' on $app "
  docker exec -it $container_id $cmd
}

run_boostrap_cmd(){
  if [[ "$BOOTSTRAP_CMD" != "" ]]; then
    echo_command "Running '$BOOTSTRAP_CMD' on '$MAIN_CONTAINER_NAME'"
    main_container_id=$(get_container_id)
    docker exec -t $main_container_id $BOOTSTRAP_CMD
  fi
}

raise_infrastructure(){
  echo_command "Raising infrastructure"
  ensure_uptodate_image
  APP_PREFIX=$APP_PREFIX docker-compose -p $APP_PREFIX run -d --service-ports $MAIN_CONTAINER_NAME tail -f /dev/null
  run_boostrap_cmd
  echo_command "Raised infrastructure"
}

# Instrumentation methods
echo_command(){
  echo "$command_indicator $1"
}

show_help(){
  echo_command "RD Docker usage:"
  echo_command "  update     - update rd-docker script"
  echo_command "  purge      - stop and remove all containers and drops all volumes within the compose "
  echo_command "  stop       - stop and remove all containers within the compose"
  echo_command "  start, s   - execute web aplication on main container"
  echo_command "  restart    - stop and remove all containers and start web aplication on main container"
  echo_command "  console, c - execute bash console on main container"
  echo_command "  exec, e    - ensure running infrastructure and execute a command in a given app container (ex: exec db \"psql -U postgres\")."
  echo_command "               for help on this subcommand (exec help)"
}

show_exec_help(){
  echo_command "RD Docker EXEC usage:"
  echo_command "  exec [container_app] \"[command]\")"
  echo_command "    container_app - name of the app container (see 'docker-compose.yml' for container names)"
  echo_command "    command       - command to be run inside the chosen container"
}

ensure_uptodate_rddocker
load_config_file
validate_configs

echo "$header_indicator Docker: $command"
case "$command" in
  update)
    update_rddocker
    exit 0
    ;;
  purge)
    clear_containers
    clear_volumes
    exit 0
    ;;
  start | s)
    echo_command "Starting web application"
    execute_command "$MAIN_CONTAINER_NAME" "/var/app/entrypoint.sh"
    exit 0
    ;;
  stop)
    echo_command "Stopping containers..."
    clear_containers
    echo_command "Stopping containers... Done"
    exit 0
    ;;
  restart)
    echo_command "Stopping containers..."
    clear_containers
    echo_command "Restarting web application"
    execute_command "$MAIN_CONTAINER_NAME" "/var/app/entrypoint.sh"
    exit 0
    ;;
  console | c)
    echo_command "Starting up TTY Session on main container"
    execute_command "$MAIN_CONTAINER_NAME" "bash"
    exit 0
    ;;
  exec | e)
    execute_command ${@:2} # pass through all arguments except the first
    exit 0
    ;;
  *)
    echo_command "Command not found"
    show_help
    exit 1
    ;;
esac
